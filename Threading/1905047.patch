diff --git a/.DS_Store b/.DS_Store
new file mode 100644
index 0000000..e30a7e4
Binary files /dev/null and b/.DS_Store differ
diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..2143081
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,5 @@
+{
+    "files.associations": {
+        "typeinfo": "c"
+    }
+}
\ No newline at end of file
diff --git a/1905047.patch b/1905047.patch
new file mode 100644
index 0000000..e69de29
diff --git a/Makefile b/Makefile
index 39a99d7..4d78038 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_test\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..ccd0750 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             createThread(uint64,uint64,uint64);
+int             joinThread(int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -165,6 +167,8 @@ void            uvmfirst(pagetable_t, uchar *, uint);
 uint64          uvmalloc(pagetable_t, uint64, uint64, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
+int             uvmmirror(pagetable_t, pagetable_t, uint64); //offline
+int             uvmrangemirror(pagetable_t, pagetable_t,uint64, uint64); // offline 
 void            uvmfree(pagetable_t, uint64);
 void            uvmunmap(pagetable_t, uint64, uint64, int);
 void            uvmclear(pagetable_t, uint64);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..55e5dec 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -13,6 +13,8 @@ struct proc proc[NPROC];
 struct proc *initproc;
 
 int nextpid = 1;
+int nextmemid=1;
+struct spinlock memidlock;
 struct spinlock pid_lock;
 
 extern void forkret(void);
@@ -50,9 +52,11 @@ procinit(void)
   struct proc *p;
   
   initlock(&pid_lock, "nextpid");
+  initlock(&memidlock,"nextmemid");
   initlock(&wait_lock, "wait_lock");
   for(p = proc; p < &proc[NPROC]; p++) {
       initlock(&p->lock, "proc");
+      initlock(&p->memlock,"memlock");
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
   }
@@ -102,6 +106,19 @@ allocpid()
   return pid;
 }
 
+int
+allocmemid()
+{
+  int mem_id;
+  
+  acquire(&memidlock);
+  mem_id = nextmemid;
+  nextmemid = nextmemid + 1;
+  release(&memidlock);
+
+  return mem_id;
+}
+
 // Look in the process table for an UNUSED proc.
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
@@ -123,6 +140,7 @@ allocproc(void)
 
 found:
   p->pid = allocpid();
+  p->mem_id=allocmemid();
   p->state = USED;
 
   // Allocate a trapframe page.
@@ -158,7 +176,7 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
+  if(p->pagetable && p->is_thread == 0)
     proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
   p->sz = 0;
@@ -169,6 +187,7 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  initlock(&p->memlock,"memlock"); //offline - 5 : for re-initialization
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -261,8 +280,11 @@ growproc(int n)
 {
   uint64 sz;
   struct proc *p = myproc();
+  struct proc *pSecond;
 
   sz = p->sz;
+  acquire(&p->memlock); 
+
   if(n > 0){
     if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
       return -1;
@@ -271,6 +293,20 @@ growproc(int n)
     sz = uvmdealloc(p->pagetable, sz, sz + n);
   }
   p->sz = sz;
+
+   for(pSecond = proc; pSecond < &proc[NPROC]; pSecond++) {
+      if(pSecond->mem_id == p->mem_id && n > 0){
+          uvmrangemirror(p->pagetable,pSecond->pagetable,pSecond->sz, sz); 
+          pSecond->sz = sz;
+      }
+      else if(pSecond->mem_id == p->mem_id && n < 0){
+        uvmunmap(pSecond->pagetable, PGROUNDUP(sz),(PGROUNDUP(pSecond->sz) - PGROUNDUP(sz))/PGSIZE, 1);
+        pSecond->sz = sz;
+      }
+  }
+
+  release(&p->memlock);  // offline - 5
+
   return 0;
 }
 
@@ -681,3 +717,100 @@ procdump(void)
     printf("\n");
   }
 }
+
+int createThread(uint64 fnc,uint64 arg,uint64 stack)
+{
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  // Copy user memory from parent to child.
+  if(uvmmirror(p->pagetable, np->pagetable, p->sz) < 0){
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+  np->sz = p->sz;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  // Cause fork to return 0 in the child.
+  //np->trapframe->a0 = 0;
+  np->trapframe->a0 = arg;
+  np->trapframe->epc = fnc;
+  np->trapframe->sp = stack + 4096;
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  np->is_thread=1;
+  np->mem_id = p->mem_id; // offline - 5
+  np->memlock = p->memlock; // offline - 5
+  np->is_thread = 1;      // offline - 5
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+
+}
+
+int 
+joinThread(int threadId){
+  struct proc *pp;
+  int havekids, pid;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->parent == p && pp->pid==threadId){
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->lock);
+
+        havekids = 1;
+        if(pp->state == ZOMBIE){
+          // Found one.
+          pid = pp->pid;
+
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&pp->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+    
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..eba9166 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -91,6 +91,9 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  int is_thread;
+  int mem_id;
+  struct spinlock memlock;
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..d687ffd 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +129,9 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join] sys_thread_join,
+[SYS_thread_exit] sys_thread_exit,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..b6abf3a 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..e4a6c21 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,30 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_thread_create(void)
+{
+  uint64 fcn,arg,stack;
+
+  argaddr(0,&fcn);
+  argaddr(1,&arg);
+  argaddr(2,&stack);
+
+  return createThread(fcn,arg,stack);
+}
+
+uint64
+sys_thread_join(void)
+{
+  int thread_id;
+  argint(0,&thread_id);
+
+  return joinThread(thread_id);
+}
+
+uint64
+sys_thread_exit(void){
+  exit(0);
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..230151b 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -292,7 +292,7 @@ void
 uvmfree(pagetable_t pagetable, uint64 sz)
 {
   if(sz > 0)
-    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 0);
   freewalk(pagetable);
 }
 
@@ -332,6 +332,69 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   return -1;
 }
 
+int
+uvmmirror(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  //char *mem;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    // if((mem = kalloc()) == 0)
+    //   goto err;
+    // memmove(mem, (char*)pa, PGSIZE);
+    if(mappages(new, i, PGSIZE, (uint64)pa, flags) != 0){
+      //kfree(mem);
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
+int
+uvmrangemirror(pagetable_t old, pagetable_t new, uint64 old_sz, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  //char *mem;
+
+  for(i = PGROUNDUP(old_sz); i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    // if((mem = kalloc()) == 0)
+    //   goto err;
+    // memmove(mem, (char*)pa, PGSIZE);
+    //if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+    if(mappages(new, i, PGSIZE, pa , flags) != 0){
+      //kfree(mem);
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, PGROUNDUP(old_sz), i / PGSIZE, 1);
+  return -1;
+}
+
+
+
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
 void
diff --git a/user/test.c b/user/test.c
new file mode 100644
index 0000000..741d992
--- /dev/null
+++ b/user/test.c
@@ -0,0 +1,141 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+struct balance {
+    char name[32];
+    int amount;
+};
+
+struct thread_spinlock {
+	uint locked;       // Is the lock held?
+	char *name;        // Name of lock.
+};
+
+struct thread_mutex {
+	uint locked;       // Is the lock held?
+	// For debugging:
+	char *name;        // Name of lock.
+};
+
+void
+thread_mutex_init(struct thread_mutex *mutax, char *name)
+{
+	mutax->name = name;
+	mutax->locked = 0;
+}
+
+// Acquire the lock.
+void
+thread_mutex_lock(struct thread_mutex *mutax)
+{
+	
+	while(__sync_lock_test_and_set(&mutax->locked, 1) != 0)
+		sleep(1);
+	__sync_synchronize();
+
+}
+
+//release the lock
+void
+thread_mutex_unlock(struct thread_mutex *mutax)
+{
+
+	 __sync_synchronize();
+
+    __sync_lock_release(&mutax->locked);
+}
+
+void
+thread_spin_init(struct thread_spinlock *lock, char *name)
+{
+	lock->name = name;
+	lock->locked = 0;
+}
+
+void
+thread_spin_lock(struct thread_spinlock *lock)
+{
+
+    while(__sync_lock_test_and_set(&lock->locked, 1) != 0);
+
+    __sync_synchronize();
+}
+
+// Release the lock.
+void
+thread_spin_unlock(struct thread_spinlock *lock)
+{
+
+    __sync_synchronize();
+
+    __sync_lock_release(&lock->locked);
+
+}
+
+volatile int total_balance = 0;
+
+volatile unsigned int delay (unsigned int d) {
+   unsigned int i; 
+   for (i = 0; i < d; i++) {
+       __asm volatile( "nop" ::: );
+   }
+
+   return i;   
+}
+
+struct thread_spinlock slock;
+struct thread_mutex mlock;
+
+void do_work(void *arg){
+    int i; 
+    int old;
+   
+    struct balance *b = (struct balance*) arg; 
+    printf( "Starting do_work: s:%s\n", b->name);
+
+    
+
+    for (i = 0; i < b->amount; i++) { 
+        // lock and mlock will be implemented by you.
+         //thread_spin_lock(&slock);
+          thread_mutex_lock(&mlock);
+         old = total_balance;
+         delay(100000);
+	 // if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+         total_balance = old + 1;
+         //thread_spin_unlock(&slock);
+          thread_mutex_unlock(&mlock);
+    }
+  
+    printf( "Done s:%x\n", b->name);
+
+    thread_exit();
+    return;
+}
+void initLocks(){
+    thread_spin_init(&slock,"slock");
+    thread_mutex_init(&mlock,"mlock");
+}
+int main(int argc, char *argv[]) {
+  initLocks();
+  struct balance b1 = {"b1", 3200};
+  struct balance b2 = {"b2", 2800};
+
+  void *s1, *s2;
+  int thread1, thread2, r1, r2;
+
+  s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+  s2 = malloc(4096);
+
+  thread1 = thread_create(do_work, (void*)&b1, s1);
+  thread2 = thread_create(do_work, (void*)&b2, s2); 
+
+  r1 = thread_join(thread1);
+  r2 = thread_join(thread2);
+  
+  printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n", 
+      thread1, r1, thread2, r2, total_balance);
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..2bfd94f 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void(*fcn)(void*), void *arg, void*stack);
+int thread_join(int thread_id);
+void thread_exit(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..a334aa7 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
